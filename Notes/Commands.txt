Lesson 1 & 2
===============
git help
git init
git config --get user.name
git config --global user.name "Wei Jin"
git config --global user.email "wjin@ggc.edu"
git config --global color.ui true

..create README.txt


git status
git add README.txt
git status
git commit -m "Create README."

..create LICENSE and modify README.txt

git status
git add --all  ==> add all changed files to stage
git commit -m "Create LICENSE and modify README."

git log

..modify LICENSE.txt

git add LICENSE.txt
git diff ==> showing nothing 
git diff --staged ==> showing the differences
git status

git reset HEAD LICENSE.txt ==> unstage LICENSE.txt
git checkout --LICENSE.txt ==> check out the commited version, erase all modifications


..modify README.txt
git commit -a -m "Modify README."  ==> add to stage and commit

git reset --soft HEAD~1 ==> Unroll commit, for soft, the stage is the same as before the commit (^ didn't work)
git add todo.txt
git commit ".. & add todo.txt."

or instead of unroll the commit, do the following:

git add todo.txt
git commit --amend -m "... & add todo.txt."


.. Created a GitHub repo 
git remote add origin https://github.com/wjinggc/git-real-code-school.git
git remote -v
git push -u origin master

git pull ==> get changes from other people to the remote

Summary: 
To add a new remote:
git remote add <name> <url address>

To remove a remote:
git remote rm <name>

To push to a remote:
git push -u <name> <branch>  //<branch> is usually master  
//-u makes git to remember the name and branch, so next time, you can simply type "git push"

DON'T do reset or "commit --amend" after push.


Lesson 3 -- Cloning and Branching
=================================
git clone <URL> 
or 
git clone <URL> new-name

This is in the cloned version, under folder git-demo.


git clone <URL> git-demo
.. did some change to notes
git status
git commit -a -m "Changed notes from cloned copy, git-demo."
git push

.. go to the original local copy.
git pull ==> Updated the repo with the commit from git-demo

.. go to git-demo
git branch cat ==> create a new branch cat
git branch ==> list all branches and see which branch the HEAD is on
git checkout cat ==> switch to cat branch

echo "Schrudinger" > cat.txt
git add cat.txt
git commit -m "Create quantum cat."

dir ==> You will see cat.txt

git checkout master  ==> go to the master branch/timeline
dir ==> you will not see cat.txt
git log ==> it will not show the commit for "Create quantum cat."

git checkout cat ==> just to check, go back to cat timeline
dir ==> you will see cat.txt
git lot ==> it will show the commit for "Create quantum cat."

.. Now done with the feature branch cat. Time to merge
git checkout master
git merge cat
got branch -d cat  ==> delete branch cat

..Now create another branch admin (in a faster way)
git checkout -b admin ==> create and checkout a branch called admin
..create dashboard.html
git add dashboard.html
git commit -m "Add dashboard".

.. Need to fix issues on master brahcn. The remote repo may have changed, so do a pull first.
git pull
.. changes LICENSE.txt
git commit -m "Add more info to LICENSE.txt."
git push

git checkout admin
..complete dashboard.html
git add dashboard.html
git commit -m "compelte dashboard.html."

..Time to merge
git checkout master
git merge admin ==> This creates a commit
git branch -d admin


Lesson 5 Remove Branches & TAGS
===============================
For a branch that has a life time longer than 1 day, a remote repo branch should be created for backup.

Gregg:  
git checkout -b shopping_cart
git push origin shopping_cart ==> link local branch to remote branch
git add shopping_cart.txt
git commit -a -m "Add basic cart ability."
git push

Jane:
git pull ==> will show a new remote branch
git branch => only see master
git branch -r ==> list all remote branches
git checkout shopping_cart ==> local branch will set up to track remote branch 
..Now Jane can work on this branch and when ready push her changes to the remote.
git remote show origin
git push origin :shopping_cart => push and then delete the remote branch
git branch -d shopping_cart ==> delete the local shopping_cart branch

Gregg:
On local shopping_cart branch:
git commit -m "xxx"
git push ==> Current branch has no upstream branch
git remove show origin
git remote prune origin //clean stale branche references that are stale

Fork: https://gist.github.com/Chaser324/ce0505fbed06b947d962
======================================
Just head over to the GitHub page and click the "Fork" button. It's just that simple. Once you've done that, you can use your favorite git client to clone your repo or just head straight to the command line:

# Clone your fork to your local machine
git clone git@github.com:USERNAME/FORKED-PROJECT.git

# Add 'upstream' repo to list of remotes
git remote add upstream https://github.com/UPSTREAM-USER/ORIGINAL-PROJECT.git

# Verify the new remote named 'upstream'
git remote -v

Whenever you want to update your fork with the latest upstream changes, you'll need to first fetch the upstream repo's branches and latest commits to bring them into your repository:

# Fetch from upstream remote
git fetch upstream

# View all branches, including those from upstream
git branch -va
To create a new branch and start working on it:

# Checkout the master branch - you want your new branch to come from master
git checkout master

# Create a new branch named newfeature (give your branch its own simple informative name)
git branch newfeature

# Switch to your new branch
git checkout newfeature

# Fetch upstream master and merge with your repo's master branch
git fetch upstream
git checkout master
git merge upstream/master

# If there were any new commits, rebase your development branch
git checkout newfeature
git rebase master

Submitting
Once you've committed and pushed all of your changes to GitHub, go to the page for your fork on GitHub, select your development branch, and click the pull request button. If you need to make any adjustments to your pull request, just push the updates to GitHub. Your pull request will automatically track the changes on your development branch and update.
